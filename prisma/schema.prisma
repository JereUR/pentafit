// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CLIENT
  STAFF
}

enum MembershipLevel {
  NONE
  STANDARD
  PREMIUM
  FULL
}

model User {
  id                    String          @id @default(uuid())
  firstName             String
  lastName              String
  email                 String?         @unique
  birthday              String
  gender                String
  role                  Role            @default(CLIENT)
  passwordHash          String?
  googleId              String?         @unique
  avatarUrl             String?
  membershipLevel       MembershipLevel @default(NONE)
  sessions              Session[]
  resetTokens           ResetToken[]
  facilities            UserFacility[]
  receivedNotifications Notification[]  @relation("RecipientNotifications")
  issuedNotifications   Notification[]  @relation("IssuerNotifications")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Facility {
  id            String            @id @default(uuid())
  name          String
  description   String?
  email         String?
  address       String?
  phone         String?
  instagram     String?
  facebook      String?
  isActive      Boolean           @default(false)
  isWorking     Boolean           @default(false)
  logoUrl       String?
  metadata      FacilityMetadata?
  users         UserFacility[]
  notifications Notification[]
  activities    Activity[]
  plans         Plan[]
  diaries       Diary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("facilities")
}

model UserFacility {
  userId     String
  facilityId String
  user       User     @relation(fields: [userId], references: [id])
  facility   Facility @relation(fields: [facilityId], references: [id])

  @@id([userId, facilityId])
  @@map("user_facilities")
}

model FacilityMetadata {
  id             Int      @id @default(autoincrement())
  title          String?
  primaryColor   String?  @default("#F97015")
  secondaryColor String?
  thirdColor     String?
  slogan         String?
  logoWebUrl     String?
  facilityId     String   @unique
  facility       Facility @relation(fields: [facilityId], references: [id])

  @@map("facility_metadata")
}

enum NotificationType {
  ACTIVITY_CREATED
  ACTIVITY_UPDATED
  ACTIVITY_DELETED
  ACTIVITY_REPLICATED
  PLAN_CREATED
  PLAN_UPDATED
  PLAN_DELETED
  PLAN_REPLICATED
  DIARY_CREATED
  DIARY_UPDATED
  DIARY_DELETED
  DIARY_REPLICATED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_REPLICATED
}

model Notification {
  id          String           @id @default(uuid())
  recipientId String
  recipient   User             @relation("RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("IssuerNotifications", fields: [issuerId], references: [id], onDelete: Cascade)
  facilityId  String
  facility    Facility         @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  activityId  String?
  activity    Activity?        @relation(fields: [activityId], references: [id], onDelete: Cascade)
  planId      String?
  plan        Plan?            @relation(fields: [planId], references: [id], onDelete: Cascade)
  diaryId     String?
  diary       Diary?           @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@map("notifications")
}

model Activity {
  id              String         @id @default(uuid())
  name            String
  description     String?
  price           Float
  isPublic        Boolean
  publicName      String?
  generateInvoice Boolean
  maxSessions     Int
  mpAvailable     Boolean
  startDate       DateTime
  endDate         DateTime
  paymentType     String
  activityType    String
  facilityId      String
  facility        Facility       @relation(fields: [facilityId], references: [id])
  notifications   Notification[]
  diaryPlans      DiaryPlan[]
  diaries         Diary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("activities")
}

enum PlanType {
  MENSUAL
  CLASE_UNICA
  MEMBRESIA
}

enum PaymentType {
  EFECTIVO
  TRANSFERENCIA
  DEBITO_AUTOMATICO
}

model Plan {
  id               String         @id @default(uuid())
  name             String
  description      String
  price            Float
  startDate        DateTime
  endDate          DateTime
  expirationPeriod Int
  generateInvoice  Boolean
  paymentTypes     PaymentType[]
  planType         PlanType
  freeTest         Boolean
  current          Boolean
  facilityId       String
  facility         Facility       @relation(fields: [facilityId], references: [id])
  diaryPlans       DiaryPlan[]
  notifications    Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model DiaryPlan {
  id              String    @id @default(uuid())
  name            String
  daysOfWeek      Boolean[]
  sessionsPerWeek Int
  plan            Plan      @relation(fields: [planId], references: [id])
  planId          String
  activity        Activity  @relation(fields: [activityId], references: [id])
  activityId      String

  @@map("diary_plans")
}

model DayAvailable {
  id        String  @id @default(uuid())
  diaryId   String
  available Boolean
  timeStart String
  timeEnd   String

  diary Diary @relation(fields: [diaryId], references: [id])

  @@map("days_available")
}

model OfferDay {
  id                 String  @id @default(uuid())
  diaryId            String
  isOffer            Boolean
  discountPercentage Float?

  diary Diary @relation(fields: [diaryId], references: [id])

  @@map("offer_days")
}

enum typeSchedule {
  TURNOS
  LIBRE
}

enum genreExclusive {
  NO
  MASCULINO
  FEMENINO
}

model Diary {
  id             String         @id @default(uuid())
  facilityId     String
  activityId     String
  name           String
  typeSchedule   typeSchedule
  dateFrom       DateTime
  dateUntil      DateTime
  repeatFor      Int?
  termDuration   Int
  amountOfPeople Int
  isActive       Boolean
  genreExclusive genreExclusive
  worksHolidays  Boolean
  observations   String?

  facility      Facility       @relation(fields: [facilityId], references: [id])
  activity      Activity       @relation(fields: [activityId], references: [id], onDelete: Cascade)
  daysAvailable DayAvailable[]
  offerDays     OfferDay[]
  notifications Notification[]

  @@map("diaries")
}
