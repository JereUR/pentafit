// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CLIENT
  STAFF
}

enum MembershipLevel {
  NONE
  STANDARD
  PREMIUM
  FULL
}

model User {
  id              String          @id @default(uuid())
  firstName       String
  lastName        String
  email           String?         @unique
  birthday        String
  gender          String
  role            Role            @default(CLIENT)
  passwordHash    String?
  googleId        String?         @unique
  avatarUrl       String?
  membershipLevel MembershipLevel @default(NONE)
  sessions        Session[]
  resetTokens     ResetToken[]
  facilities      UserFacility[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Facility {
  id          String            @id @default(uuid())
  name        String
  description String?
  email       String?
  address     String?
  phone       String?
  instagram   String?
  facebook    String?
  isActive    Boolean           @default(false)
  isWorking   Boolean           @default(false)
  logoUrl     String?
  metadata    FacilityMetadata?
  users       UserFacility[]
  activities  Activity[]
  plans       Plan[]
  diaries     Diary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("facilities")
}

model UserFacility {
  userId     String
  facilityId String
  user       User     @relation(fields: [userId], references: [id])
  facility   Facility @relation(fields: [facilityId], references: [id])

  @@id([userId, facilityId])
  @@map("user_facilities")
}

model FacilityMetadata {
  id             Int      @id @default(autoincrement())
  title          String?
  primaryColor   String?  @default("#F97015")
  secondaryColor String?
  thirdColor     String?
  slogan         String?
  logoWebUrl     String?
  facilityId     String   @unique
  facility       Facility @relation(fields: [facilityId], references: [id])

  @@map("facility_metadata")
}

model Activity {
  id              String      @id @default(uuid())
  name            String
  description     String?
  price           Float
  isPublic        Boolean
  publicName      String?
  generateInvoice Boolean
  maxSessions     Int
  mpAvailable     Boolean
  startDate       DateTime
  endDate         DateTime
  paymentType     String
  activityType    String
  facilityId      String
  facility        Facility    @relation(fields: [facilityId], references: [id])
  diaryPlans      DiaryPlan[]
  diaries         Diary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("activities")
}

enum PlanType {
  MENSUAL
  CLASE_UNICA
  MEMBRESIA
}

enum PaymentType {
  EFECTIVO
  TRANSFERENCIA
  DEBITO_AUTOMATICO
}

model Plan {
  id               String        @id @default(uuid())
  name             String
  description      String
  price            Float
  startDate        DateTime
  endDate          DateTime
  expirationPeriod Int
  generateInvoice  Boolean
  paymentTypes     PaymentType[]
  planType         PlanType
  freeTest         Boolean
  current          Boolean
  facilityId       String
  facility         Facility      @relation(fields: [facilityId], references: [id])
  diaryPlans       DiaryPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model DiaryPlan {
  id              String    @id @default(uuid())
  name            String
  daysOfWeek      Boolean[]
  sessionsPerWeek Int
  plan            Plan      @relation(fields: [planId], references: [id])
  planId          String
  activity        Activity  @relation(fields: [activityId], references: [id])
  activityId      String

  @@map("diary_plans")
}

model DayAvailable {
  id        Int     @id @default(autoincrement())
  diaryId   Int
  active    Boolean
  timeStart String
  timeEnd   String

  diary Diary @relation(fields: [diaryId], references: [id])

  @@map("days_available")
}

enum typeSchedule {
  TURNOS
  LIBRE
}

enum genreExclusive {
  NO
  MASCULINO
  FEMENINO
}

model Diary {
  id             Int            @id @default(autoincrement())
  facilityId     String
  activityId     String
  name           String
  typeSchedule   typeSchedule
  dateFrom       DateTime
  dateUntil      DateTime
  repeatFor      Int?
  offerDays      Boolean[]
  termDuration   Int
  amountOfPeople Int
  isActive       Boolean
  genreExclusive genreExclusive
  worksHolidays  Boolean
  observations   String?

  facility      Facility       @relation(fields: [facilityId], references: [id])
  activity      Activity       @relation(fields: [activityId], references: [id])
  daysAvailable DayAvailable[]

  @@map("diaries")
}
