// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User

enum Role {
  SUPER_ADMIN
  ADMIN
  CLIENT
  STAFF
}

enum MembershipLevel {
  NONE
  STANDARD
  PREMIUM
  FULL
}

model User {
  id                     String                @id @default(uuid())
  firstName              String
  lastName               String
  email                  String?               @unique
  birthday               String
  gender                 String
  role                   Role                  @default(CLIENT)
  passwordHash           String?
  googleId               String?               @unique
  avatarUrl              String?
  membershipLevel        MembershipLevel       @default(NONE)
  sessions               Session[]
  resetTokens            ResetToken[]
  facilities             UserFacility[]
  receivedNotifications  Notification[]        @relation("RecipientNotifications")
  issuedNotifications    Notification[]        @relation("IssuerNotifications")
  performedTransactions  Transaction[]         @relation("PerformedTransactions")
  targetUserTransactions Transaction[]         @relation("TargetUserTransactions")
  routines               UserRoutine[]
  notifications          Notification[]
  staffActivities        ActivityStaff[]
  nutritionalPlans       UserNutritionalPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Facility

model Facility {
  id                     String                  @id @default(uuid())
  name                   String
  description            String?
  email                  String?
  address                String?
  phone                  String?
  instagram              String?
  facebook               String?
  isActive               Boolean                 @default(false)
  isWorking              Boolean                 @default(false)
  logoUrl                String?
  metadata               FacilityMetadata?
  users                  UserFacility[]
  notifications          Notification[]
  activities             Activity[]
  plans                  Plan[]
  diaries                Diary[]
  transactions           Transaction[]
  routines               Routine[]
  presetRoutines         PresetRoutine[]
  nutritionalPlans       NutritionalPlan[]
  presetNutritionalPlans PresetNutritionalPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("facilities")
}

model UserFacility {
  userId     String
  facilityId String
  user       User     @relation(fields: [userId], references: [id])
  facility   Facility @relation(fields: [facilityId], references: [id])

  @@id([userId, facilityId])
  @@map("user_facilities")
}

model FacilityMetadata {
  id             Int      @id @default(autoincrement())
  title          String?
  primaryColor   String?  @default("#F97015")
  secondaryColor String?
  thirdColor     String?
  slogan         String?
  logoWebUrl     String?
  facilityId     String   @unique
  facility       Facility @relation(fields: [facilityId], references: [id])

  @@map("facility_metadata")
}

// Notifications

enum NotificationType {
  ACTIVITY_CREATED
  ACTIVITY_UPDATED
  ACTIVITY_DELETED
  ACTIVITY_REPLICATED
  PLAN_CREATED
  PLAN_UPDATED
  PLAN_DELETED
  PLAN_REPLICATED
  DIARY_CREATED
  DIARY_UPDATED
  DIARY_DELETED
  DIARY_REPLICATED
  ROUTINE_CREATED
  ROUTINE_UPDATED
  ROUTINE_DELETED
  ROUTINE_REPLICATED
  ROUTINE_CONVERTED_TO_PRESET
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  PRESET_ROUTINE_CREATED
  PRESET_ROUTINE_UPDATED
  PRESET_ROUTINE_DELETED
  PRESET_ROUTINE_REPLICATED
  ASSIGN_ROUTINE_USER
  UNASSIGN_ROUTINE_USER
  NUTRITIONAL_PLAN_CREATED
  NUTRITIONAL_PLAN_UPDATED
  NUTRITIONAL_PLAN_DELETED
  NUTRITIONAL_PLAN_REPLICATED
  NUTRITIONAL_PLAN_CONVERTED_TO_PRESET
  ASSIGN_NUTRITIONAL_PLAN_USER
  UNASSIGN_NUTRITIONAL_PLAN_USER
  PRESET_NUTRITIONAL_PLAN_CREATED
  PRESET_NUTRITIONAL_PLAN_UPDATED
  PRESET_NUTRITIONAL_PLAN_DELETED
  PRESET_NUTRITIONAL_PLAN_REPLICATED
}

model Notification {
  id String @id @default(uuid())

  recipientId String
  recipient   User   @relation("RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)

  issuerId String
  issuer   User   @relation("IssuerNotifications", fields: [issuerId], references: [id], onDelete: Cascade)

  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id], onDelete: Cascade)

  diaryId String?
  diary   Diary?  @relation(fields: [diaryId], references: [id], onDelete: Cascade)

  routineId String?
  routine   Routine? @relation(fields: [routineId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  presetRoutineId String?
  presetRoutine   PresetRoutine? @relation(fields: [presetRoutineId], references: [id], onDelete: Cascade)

  nutritionalPlanId String?
  nutritionalPlan   NutritionalPlan? @relation(fields: [nutritionalPlanId], references: [id], onDelete: Cascade)

  presetNutritionalPlanId String?
  presetNutritionalPlan   PresetNutritionalPlan? @relation(fields: [presetNutritionalPlanId], references: [id], onDelete: Cascade)

  read      Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())

  @@map("notifications")
}

//Transcations

enum TransactionType {
  ACTIVITY_CREATED
  ACTIVITY_UPDATED
  ACTIVITY_DELETED
  ACTIVITY_REPLICATED
  STAFF_CREATED
  STAFF_UPDATED
  STAFF_DELETED
  STAFF_ROLE_CHANGED
  CLIENT_CREATED
  CLIENT_UPDATED
  CLIENT_DELETED
  CLIENT_MEMBERSHIP_CHANGED
  PLAN_CREATED
  PLAN_UPDATED
  PLAN_DELETED
  PLAN_REPLICATED
  DIARY_CREATED
  DIARY_UPDATED
  DIARY_DELETED
  DIARY_REPLICATED
  ROUTINE_CREATED
  ROUTINE_UPDATED
  ROUTINE_DELETED
  ROUTINE_REPLICATED
  ROUTINE_CONVERTED_TO_PRESET
  PRESET_ROUTINE_CREATED
  PRESET_ROUTINE_UPDATED
  PRESET_ROUTINE_DELETED
  PRESET_ROUTINE_REPLICATED
  ASSIGN_ROUTINE_USER
  UNASSIGN_ROUTINE_USER
  NUTRITIONAL_PLAN_CREATED
  NUTRITIONAL_PLAN_UPDATED
  NUTRITIONAL_PLAN_DELETED
  NUTRITIONAL_PLAN_REPLICATED
  NUTRITIONAL_PLAN_CONVERTED_TO_PRESET
  ASSIGN_NUTRITIONAL_PLAN_USER
  UNASSIGN_NUTRITIONAL_PLAN_USER
  PRESET_NUTRITIONAL_PLAN_CREATED
  PRESET_NUTRITIONAL_PLAN_UPDATED
  PRESET_NUTRITIONAL_PLAN_DELETED
  PRESET_NUTRITIONAL_PLAN_REPLICATED
}

model Transaction {
  id      String          @id @default(uuid())
  type    TransactionType
  details Json?

  performedById String
  performedBy   User   @relation("PerformedTransactions", fields: [performedById], references: [id], onDelete: Cascade)

  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: SetNull)

  targetUserId String?
  targetUser   User?   @relation("TargetUserTransactions", fields: [targetUserId], references: [id], onDelete: SetNull)

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id], onDelete: SetNull)

  diaryId String?
  diary   Diary?  @relation(fields: [diaryId], references: [id], onDelete: SetNull)

  routineId String?
  routine   Routine? @relation(fields: [routineId], references: [id], onDelete: SetNull)

  presetRoutineId String?
  presetRoutine   PresetRoutine? @relation(fields: [presetRoutineId], references: [id], onDelete: SetNull)

  nutritionalPlanId String?
  nutritionalPlan   NutritionalPlan? @relation(fields: [nutritionalPlanId], references: [id], onDelete: SetNull)

  presetNutritionalPlanId String?
  presetNutritionalPlan   PresetNutritionalPlan? @relation(fields: [presetNutritionalPlanId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("transactions")
}

//Activity

model Activity {
  id              String          @id @default(uuid())
  name            String
  description     String?
  price           Float
  isPublic        Boolean
  publicName      String?
  generateInvoice Boolean
  maxSessions     Int
  mpAvailable     Boolean
  startDate       DateTime
  endDate         DateTime
  paymentType     String
  activityType    String
  facilityId      String
  facility        Facility        @relation(fields: [facilityId], references: [id])
  notifications   Notification[]
  diaryPlans      DiaryPlan[]
  diaries         Diary[]
  transactions    Transaction[]
  staffMembers    ActivityStaff[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("activities")
}

model ActivityStaff {
  id         String   @id @default(uuid())
  activityId String
  userId     String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([activityId, userId])
  @@map("activity_staff")
}

// Plan

enum PlanType {
  MENSUAL
  CLASE_UNICA
  MEMBRESIA
}

enum PaymentType {
  EFECTIVO
  TRANSFERENCIA
  DEBITO_AUTOMATICO
}

model Plan {
  id               String         @id @default(uuid())
  name             String
  description      String
  price            Float
  startDate        DateTime
  endDate          DateTime
  expirationPeriod Int
  generateInvoice  Boolean
  paymentTypes     PaymentType[]
  planType         PlanType
  freeTest         Boolean
  current          Boolean
  facilityId       String
  facility         Facility       @relation(fields: [facilityId], references: [id])
  diaryPlans       DiaryPlan[]
  notifications    Notification[]
  transactions     Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model DiaryPlan {
  id              String    @id @default(uuid())
  name            String
  daysOfWeek      Boolean[]
  sessionsPerWeek Int
  plan            Plan      @relation(fields: [planId], references: [id])
  planId          String
  activity        Activity  @relation(fields: [activityId], references: [id])
  activityId      String

  @@map("diary_plans")
}

// Diary

model DayAvailable {
  id        String  @id @default(uuid())
  diaryId   String
  available Boolean
  timeStart String
  timeEnd   String

  diary Diary @relation(fields: [diaryId], references: [id], onDelete: Cascade)

  @@map("days_available")
}

model OfferDay {
  id                 String  @id @default(uuid())
  diaryId            String
  isOffer            Boolean
  discountPercentage Float?

  diary Diary @relation(fields: [diaryId], references: [id], onDelete: Cascade)

  @@map("offer_days")
}

enum typeSchedule {
  TURNOS
  LIBRE
}

enum genreExclusive {
  NO
  MASCULINO
  FEMENINO
}

model Diary {
  id             String         @id @default(uuid())
  facilityId     String
  activityId     String
  name           String
  typeSchedule   typeSchedule
  dateFrom       DateTime
  dateUntil      DateTime
  repeatFor      Int?
  termDuration   Int
  amountOfPeople Int
  isActive       Boolean
  genreExclusive genreExclusive
  worksHolidays  Boolean
  observations   String?

  facility      Facility       @relation(fields: [facilityId], references: [id])
  activity      Activity       @relation(fields: [activityId], references: [id], onDelete: Cascade)
  daysAvailable DayAvailable[]
  offerDays     OfferDay[]
  notifications Notification[]
  transactions  Transaction[]

  @@map("diaries")
}

// Routine

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Routine {
  id             String          @id @default(uuid())
  name           String
  description    String?
  facilityId     String
  facility       Facility        @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  dailyExercises DailyExercise[]
  userRoutines   UserRoutine[]
  notifications  Notification[]
  transactions   Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("routines")
}

model DailyExercise {
  id              String         @id @default(uuid())
  dayOfWeek       DayOfWeek
  routineId       String?
  routine         Routine?       @relation(fields: [routineId], references: [id], onDelete: Cascade)
  presetRoutineId String?
  presetRoutine   PresetRoutine? @relation(fields: [presetRoutineId], references: [id], onDelete: Cascade)
  exercises       Exercise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([routineId, dayOfWeek])
  @@unique([presetRoutineId, dayOfWeek])
  @@map("daily_exercises")
}

model Exercise {
  id              String         @id @default(uuid())
  name            String
  bodyZone        String
  series          Int
  count           Int
  measure         String
  rest            Int?
  description     String?
  photoUrl        String?
  dailyExerciseId String?
  dailyExercise   DailyExercise? @relation(fields: [dailyExerciseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("exercises")
}

model UserRoutine {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  routineId String
  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, routineId])
  @@index([userId, isActive])
  @@map("user_routines")
}

model PresetRoutine {
  id             String          @id @default(uuid())
  name           String
  description    String?
  facilityId     String
  facility       Facility        @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  dailyExercises DailyExercise[]
  notifications  Notification[]
  transactions   Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("preset_routines")
}

// Nutritional Plan

enum MealType {
  BREAKFAST
  PRE_WORKOUT
  LUNCH
  SNACK
  DINNER
  POST_WORKOUT
  OTHER
}

model NutritionalPlan {
  id            String                @id @default(uuid())
  name          String
  description   String?
  facilityId    String
  facility      Facility              @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  dailyMeals    DailyMeal[]
  userPlans     UserNutritionalPlan[]
  notifications Notification[]
  transactions  Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("nutritional_plans")
}

model PresetNutritionalPlan {
  id            String         @id @default(uuid())
  name          String
  description   String?
  facilityId    String
  facility      Facility       @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  dailyMeals    DailyMeal[]
  notifications Notification[]
  transactions  Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("preset_nutritional_plans")
}

model DailyMeal {
  id                      String                 @id @default(uuid())
  dayOfWeek               DayOfWeek
  nutritionalPlanId       String?
  nutritionalPlan         NutritionalPlan?       @relation(fields: [nutritionalPlanId], references: [id], onDelete: Cascade)
  presetNutritionalPlanId String?
  presetNutritionalPlan   PresetNutritionalPlan? @relation(fields: [presetNutritionalPlanId], references: [id], onDelete: Cascade)
  meals                   Meal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nutritionalPlanId, dayOfWeek])
  @@unique([presetNutritionalPlanId, dayOfWeek])
  @@map("daily_meals")
}

model Meal {
  id          String     @id @default(uuid())
  name        String
  mealType    MealType
  time        String?
  dailyMealId String
  dailyMeal   DailyMeal  @relation(fields: [dailyMealId], references: [id], onDelete: Cascade)
  foodItems   FoodItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("meals")
}

model FoodItem {
  id       String  @id @default(uuid())
  name     String
  portion  Float
  unit     String
  calories Float?
  protein  Float?
  carbs    Float?
  fat      Float?
  notes    String?
  mealId   String
  meal     Meal    @relation(fields: [mealId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("food_items")
}

model UserNutritionalPlan {
  id                String          @id @default(uuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  nutritionalPlanId String
  nutritionalPlan   NutritionalPlan @relation(fields: [nutritionalPlanId], references: [id], onDelete: Cascade)
  isActive          Boolean         @default(true)
  startDate         DateTime        @default(now())
  endDate           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, nutritionalPlanId])
  @@map("user_nutritional_plans")
}
